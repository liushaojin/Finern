using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace BlueWay_Shangliao.UI.MyControl
{
    public enum ButtonType
    {
        Normal, //普通型按钮
        Menu,   //图上文下型按钮
    };
    public partial class ImageButton : UserControl
    {
        private ButtonType btnType = ButtonType.Menu;
        //public delegate void EventHandler(object sender, EventArgs e);
        public event System.EventHandler ButtonClick;
        
        /// <summary>
        /// 控件的默认图标
        /// </summary>
        private Image imageIcon = null;
        [Description("控件的默认图标")]
        public Image ImageIcon
        {
            get
            {
                return imageIcon;
            }
            set
            {
                imageIcon = value;
                pictureBox1.Image = imageIcon;
                this.Invalidate();
            }
        }
        /// <summary>
        /// 控件的默认图片
        /// </summary>
        private Image ImageDefault = BlueWay_Shangliao.Properties.Resources.btn_normal;
        //private Image imageDefault = BlueWay_Shangliao.Properties.Resources.btn_normal;
        //[Description("控件的默认图片")]
        //public Image ImageDefault
        //{
        //    get
        //    {
        //        return imageDefault;
        //    }
        //    set
        //    {
        //        imageDefault = value;
        //        this.BackgroundImage = imageDefault;
        //        this.Invalidate();
        //    }
        //}
        
        
        /// <summary>
        /// 控件按下时的图片
        /// </summary>
        private Image imagePress = null;
        [Description("控件按下时的图片")]
        public Image ImagePress
        {
            get
            {
                return imagePress;
            }
            set
            {
                imagePress = value;
                this.BackgroundImage = imagePress;
                this.Invalidate();
            }
        }
        /// <summary>
        /// 光标移动到控件上方显示的图片
        /// </summary>
        private Image imageEnter = null;
        [Description("光标移动到控件上方显示的图片")]
        public Image ImageEnter
        {
            get
            {
                return imageEnter;
            }
            set
            {
                imageEnter = value;
                this.BackgroundImage = imageEnter;
                this.Invalidate();
            }
        }
        /// <summary>
        /// 光标离开控件显示的图片
        /// </summary>
        private Image imageLeave = null;
        [Description("光标离开控件显示的图片")]
        public Image ImageLeave
        {
            get
            {
                return imageLeave;
            }
            set
            {
                imageLeave = value;
                this.BackgroundImage = imageLeave;
                this.Invalidate();
            }
        }
        /// <summary>
        /// 控件的背景色
        /// </summary>
        private Color backColorM = Color.Transparent;
        [Description("控件的背景色")]
        public Color BackColorM
        {
            get
            {
                return backColorM;
            }
            set
            {
                backColorM = value;
                this.BackColor = backColorM;
                this.Invalidate();
            }
        }
        /// <summary>
        /// 光标移动到控件上方显示的颜色
        /// </summary>
        private Color backColorMove = Color.Transparent;
        [Description("光标移动到控件上方显示的颜色")]
        public Color BackColorMove
        {
            get
            {
                return backColorMove;
            }
            set
            {
                backColorMove = value;
                this.BackColor = backColorMove;
                this.Invalidate();
            }
        }
        /// <summary>
        /// 光标离开控件显示的背景色
        /// </summary>
        private Color backColorLeave = Color.Transparent;
        [Description("光标离开控件显示的背景色")]
        public Color BackColorLeave
        {
            get
            {
                return backColorLeave;
            }
            set
            {
                backColorLeave = value;
                this.BackColor = backColorLeave;
                this.Invalidate();
            }
        }
        /// <summary>
        /// 控件的文字提示
        /// </summary>
        private string textM = "按键";
        [Description("显示的文字")]
        public string TextM
        {
            get
            {
                return textM;
            }
            set
            {
                textM = value;
                label1.Text = textM;
                this.Invalidate();
            }
        }
        /// <summary>
        /// 文字的颜色
        /// </summary>
        private Color textColor = Color.DarkGray;
        [Description("文字的颜色")]
        public Color TextColor
        {
            get
            {
                return textColor;
            }
            set
            {
                textColor = value;
                label1.ForeColor = textColor;
                this.Invalidate();
            }
        }
        /// <summary>
        /// 用于显示文本的字体
        /// </summary>
        private Font fontM = new System.Drawing.Font("宋体", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(134)));
        [Description("用于显示文本的字体")]
        public Font FontM
        {
            get
            {
                return fontM;
            }
            set
            {
                fontM = value;
                label1.Font = fontM;
                this.Invalidate();
            }
        }
        
        
        public ImageButton()
        {
            InitializeComponent();
            
            if(btnType == ButtonType.Normal)
            {
                this.Size = new Size(100, 40);
            }
            else
            {
                this.Size = new Size(80, 80);
            }
            
            pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;
            //this.BackgroundImage = BlueWay_Shangliao.Properties.Resources.btn_normal;
            this.BackgroundImageLayout = ImageLayout.Stretch;
            AdjustControlLayout();
        }
        public ImageButton(ButtonType type)
        {
            btnType = type;
            InitializeComponent();
            
            if(type == ButtonType.Normal)
            {
                this.Size = new Size(100, 40);
            }
            else
            {
                this.Size = new Size(80, 80);
            }
            
            pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;
            this.BackgroundImageLayout = ImageLayout.Stretch;
            AdjustControlLayout();
        }
        
        private void AdjustControlLayout()
        {
            pictureBox1.SizeMode = PictureBoxSizeMode.StretchImage;
            label1.TextAlign = ContentAlignment.MiddleCenter;
        }
        private void ImageButton_Click(object sender, EventArgs e)
        {
            base.OnClick(e);
            //if (ButtonClick != null)
            //{
            //    ButtonClick(sender, e);
            //}
        }
        
        
        private void ImageButton_MouseEnter(object sender, EventArgs e)
        {
            this.BackgroundImage = BlueWay_Shangliao.Properties.Resources.btn_enter;
            //ImageDefault = BlueWay_Shangliao.Properties.Resources.btn_enter; //imageEnter;
        }
        
        private void ImageButton_MouseDown(object sender, MouseEventArgs e)
        {
            this.BackgroundImage = BlueWay_Shangliao.Properties.Resources.btn_press;
            //ImageDefault = BlueWay_Shangliao.Properties.Resources.btn_press; //imagePress;
        }
        
        private void ImageButton_MouseLeave(object sender, EventArgs e)
        {
            this.BackgroundImage = BlueWay_Shangliao.Properties.Resources.btn_normal;
            //ImageDefault = BlueWay_Shangliao.Properties.Resources.btn_normal; //imageLeave;
        }
        
        private void ImageButton_MouseUp(object sender, MouseEventArgs e)
        {
            this.BackgroundImage = BlueWay_Shangliao.Properties.Resources.btn_enter;
            //ImageDefault = BlueWay_Shangliao.Properties.Resources.btn_enter;
        }
        
        //private void ImageButton_Resize(object sender, EventArgs e)
        //{
        //    ResizeControl(5);
        //}
        
        private void ImageButton_SizeChanged(object sender, EventArgs e)
        {
            ResizeControl();
        }
        
        private void ResizeControl()
        {
            int width = this.Size.Width;
            int height = this.Size.Height;
            int iconW = 0;
            int labelH = 0;
            int minVal = 0;
            int maxVal = 0;
            int pos = 0;
            
            if(width >= height)
            {
                minVal = height;
                maxVal = width;
            }
            else
            {
                minVal = width;
                maxVal = height;
            }
            
            if(btnType == ButtonType.Normal)
            {
                iconW = minVal * 3 / 4;
                labelH = minVal / 4;
                pos = (minVal - iconW) / 2;
                pictureBox1.Location = new Point(pos, pos);
                pictureBox1.Size = new Size(iconW, iconW);
                label1.Location = new Point(minVal, 0);
                label1.Size = new Size(width - minVal, height);
            }
            else
            {
                iconW = minVal * 3 / 4;
                labelH = minVal / 4;
                pos = (width - iconW) / 2;
                pictureBox1.Location = new Point(pos, 0);
                pictureBox1.Size = new Size(iconW, iconW);
                label1.Location = new Point(0, iconW);
                label1.Size = new Size(width, labelH);
            }
        }
        
        //开放了则会在创建时就初始显示控件的背景,不开放则在鼠标经过时才初显示
        //protected override void OnPaint(PaintEventArgs e)
        //{
        //    Graphics g = e.Graphics;
        //    Rectangle rec = new Rectangle(0, 0, this.Size.Width, this.Size.Height);
        //    g.DrawImage(ImageDefault, rec);
        //}
        
    }
}
